from hydromt_fiat.api.data_types import VulnerabilityIni
from hydromt_fiat.interface.database import IDatabase
from hydromt import DataCatalog
import logging
import pandas as pd

from .data_types import Units


class VulnerabilityViewModel:
    def __init__(
        self, database: IDatabase, data_catalog: DataCatalog, logger: logging.Logger
    ):
        self.vulnerability_model = VulnerabilityIni(
            vulnerability_fn="",
            vulnerability_identifiers_and_linking_fn="",
            unit=Units.ft.value,
            functions_mean="default",
        )
        self.database: IDatabase = database
        self.data_catalog: DataCatalog = data_catalog
        self.logger: logging.Logger = logger
        self.linking_standard_colnames = [
            "FIAT Damage Function Name",
            "Exposure Link",
        ]  # add "Damage Type" ?
        self.linking_colnames = list()
        self.linking_list = list()

    def get_default_curves_linking_file(self):
        return self.data_catalog.get_dataframe("default_hazus_iwr_linking")

    def add_vulnerability_curves_to_model(self, vulnerability_fn, link_table):
        self.vulnerability_model.vulnerability_fn = vulnerability_fn
        self.vulnerability_model.vulnerability_identifiers_and_linking_fn = link_table
        print("Damage curves added")

    def get_hazus_curves(self):
        self.logger.info("Getting Hazus curves")
        df_vulnerability = self.data_catalog.get_dataframe("hazus_vulnerability_curves")
        self.linking_colnames = ["BldgDmgFnID", "Occupancy", "Source", "Description"]
        list_vulnerability_curve_ids = (
            df_vulnerability[self.linking_colnames]
            .apply(lambda row: "; ".join(row.values.astype(str)), axis=1)
            .to_list()
        )
        self.vulnerability_model.vulnerability_fn = "hazus_vulnerability_curves"
        return list_vulnerability_curve_ids

    def set_linking_table(self, name, link):
        self.logger.info("Setting linking table")
        linking_info = link.split("; ")
        linking_info = [name, name] + linking_info
        self.linking_list.append(linking_info)
        return " ".join(linking_info)

    def save_linking_table(self):
        self.linking_standard_colnames.extend(self.linking_colnames)
        df = pd.DataFrame(
            columns=self.linking_standard_colnames, data=self.linking_list
        )
        self.vulnerability_model.vulnerability_identifiers_and_linking_fn = str(
            self.database.drive / "linking_table.csv"
        )
        df.to_csv(
            self.vulnerability_model.vulnerability_identifiers_and_linking_fn,
            index=False,
        )
