class Config(BaseModel):
    output_dir: Path
    crs: str


class Hazard(BaseModel):
    hazard_map_fn: Union[str, Path]
    hazard_type: str
    return_period: Optional[Union[int, None]] = None
    crs: Optional[str] = None
    no_data: Optional[int] = -9999
    var: Optional[Union[str, None]] = None
    chunks: Optional[Union[int, str]] = "auto"


class Vulnerability(BaseModel):
    vulnerability_fn: Union[str, Path]
    link_table: Union[str, Path]
    units: Units


class ExposureGrid(BaseModel):
    ...


class HydroMTConfig(BaseModel):
    setup_config: Config | None
    setup_hazard: Hazard | None
    setup_vulnerability: Vulnerability | None
    setup_exposure_vector: Optional[ExposureVector]


class ConfigHandler:
    def __init__(self):
        self.attrs: HydroMTConfig

    @staticmethod
    def load_file(filepath: Path | str) -> object:
        try:
            obj = ConfigHandler()
            with open(filepath, "rb") as f:
                toml_dict = tomli.load(f)
                obj.attrs = HydroMTConfig.parse_obj(toml_dict)
                return obj
        except FileNotFoundError as err:
            print(f"Error no {err.errno}: {err.strerror} {err.filename}")

    @staticmethod
    def load_dict(model_dict: Dict[str, Any]) -> object:
        try:
            obj = ConfigHandler()
            obj.attrs = HydroMTConfig.parse_obj(model_dict)

            return obj

        except Exception as err:
            print(f"{err}")

    def save(self, filepath: Path) -> None:
        with open(filepath, "wb") as f:
            tomli_w.dump(self.attrs.dict(), f)
