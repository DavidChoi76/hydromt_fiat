import pandas as pd
import numpy as np
from pathlib import Path
from hydromt.data_catalog import DataCatalog

### TO BE UPDATED ###
class Vulnerability:
    def __init__(self, data_catalog: DataCatalog, config: dict):
        self.data_catalog = data_catalog
        self.config = config

    def get_vulnerability_function(self):
        # TODO: @Luis: this function needs to be changed. Now it looks up a damage function
        # according to country that is chosen but we want the user to choose their
        # damage functions per category (res, com, etc.). So our function will be
        # quite different.
        """Return the susceptibility function id and the maximum damage number."""
        
        # Read the global exposure configuration.
        df_config = self.data_catalog.get_dataframe(self.config['setup_vulnerability']["vulnerability_source"])
        
        
        self.config['setup_vulnerability'].keys()
        
        self.config['setup_vulnerability']['bldg_dmg_fn_id_1']
        
        bldg_dmg_fn_id_1 = self.config['setup_vulnerability'].keys(bldg_dmg_fn_id_1)
        
        # USER INPUTS
        # Choose which vulnerability functions to extract.
        bldg_dmg_fn_id_1 = 526
        occupancy_1 = str("COM8 ")
        source_1 = str("USACE - St. Paul")
        description_1 = str("Recreation, structure, fresh water")
        
        description_1_only_naming = description_1.replace(",", ";")
        vf_name_1 = str(bldg_dmg_fn_id_1) + " | " + occupancy_1 + "| " + source_1 + " | " + description_1_only_naming
        
        bldg_dmg_fn_id_2 = 147
        occupancy_2 = str("RES1 ")
        source_2 = str("USACE - New Orleans")
        description_2 = str("one story, Slab foundation, structure, salt water, short duration")
        
        description_2_only_naming = description_2.replace(",", ";")
        vf_name_2 = str(bldg_dmg_fn_id_2) + " | " + occupancy_2 + "| " + source_2 + " | " + description_2_only_naming
        
        # Specify the row that you want to extract based on strings in different cells
        try:
            target_row_1 = df_config.loc[(df_config['BldgDmgFnID'] == bldg_dmg_fn_id_1) & (df_config['Occupancy'] == occupancy_1) & (df_config['Source'] == source_1) & (df_config['Description'] == description_1)].values.T
            target_row_2 = df_config.loc[(df_config['BldgDmgFnID'] == bldg_dmg_fn_id_2) & (df_config['Occupancy'] == occupancy_2) & (df_config['Source'] == source_2) & (df_config['Description'] == description_2)].values.T

        except IndexError:
            print("Error: Target vulnerability function not found.")

        # Get vulnerability factors and apply FIAT format.
        vf_values = np.hstack([target_row_1, target_row_2])
        vf_values_only = vf_values[4:-1] / 100
        
        vf_water_depths_numbers = np.arange(-4,25)
        vf_water_depths = np.array(vf_water_depths_numbers.reshape(-1,1))
        vf_raw = np.hstack([vf_water_depths,vf_values_only])
        
        vf_names = np.array([['water depth',vf_name_1,vf_name_2]])
        vf_with_headers = np.concatenate([vf_names, vf_raw])
        
        top_header_array = np.full((1, 3), fill_value="", dtype='<U100')
        top_header_array[0, 0] = "#UNIT=feet"

        vf_fiat_format = np.concatenate([top_header_array, vf_with_headers])

        # Create a dataframe out of the previous array.
        v_dataframe = pd.DataFrame(vf_fiat_format)
        
        # Export the dataframe to a csv.
        v_dataframe.to_csv('vulnerability_test_file_output.csv', index=False, header=False)
        